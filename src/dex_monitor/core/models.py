"""Data models for DEX monitoring system."""

from dataclasses import dataclass, field
from datetime import datetime
from typing import Dict, Any, Optional, List
from enum import Enum


class EventType(Enum):
    """Types of events that can be monitored."""
    SWAP = "swap"
    LIQUIDITY_ADD = "liquidity_add"
    LIQUIDITY_REMOVE = "liquidity_remove"
    PRICE_CHANGE = "price_change"
    DEPEG_ALERT = "depeg_alert"
    VOLUME_SPIKE = "volume_spike"
    PROTOCOL_UPDATE = "protocol_update"


class AlertSeverity(Enum):
    """Alert severity levels."""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


@dataclass
class Token:
    """Represents a token in the DEX."""
    symbol: str
    address: str
    decimals: int
    name: str
    current_price: Optional[float] = None
    market_cap: Optional[float] = None
    
    def __post_init__(self):
        self.address = self.address.lower()


@dataclass
class TradingPair:
    """Represents a trading pair in the DEX."""
    token0: Token
    token1: Token
    pool_address: str
    fee_tier: float
    liquidity: Optional[float] = None
    volume_24h: Optional[float] = None
    
    @property
    def pair_name(self) -> str:
        return f"{self.token0.symbol}/{self.token1.symbol}"
    
    def __post_init__(self):
        self.pool_address = self.pool_address.lower()


@dataclass
class SwapEvent:
    """Represents a swap event in the DEX."""
    timestamp: datetime
    pair: TradingPair
    amount_in: float
    amount_out: float
    token_in: Token
    token_out: Token
    price: float
    transaction_hash: str
    block_number: int
    gas_used: Optional[int] = None
    
    def __post_init__(self):
        self.transaction_hash = self.transaction_hash.lower()


@dataclass
class LiquidityEvent:
    """Represents a liquidity event in the DEX."""
    timestamp: datetime
    pair: TradingPair
    event_type: EventType  # LIQUIDITY_ADD or LIQUIDITY_REMOVE
    amount0: float
    amount1: float
    liquidity_delta: float
    transaction_hash: str
    block_number: int
    provider: str
    
    def __post_init__(self):
        self.transaction_hash = self.transaction_hash.lower()
        self.provider = self.provider.lower()


@dataclass
class PriceData:
    """Represents price data for a token."""
    timestamp: datetime
    token: Token
    price_usd: float
    volume_24h: float
    market_cap: Optional[float] = None
    price_change_24h: Optional[float] = None
    source: str = "coingecko"


@dataclass
class Alert:
    """Represents an alert generated by the monitoring system."""
    id: str
    timestamp: datetime
    event_type: EventType
    severity: AlertSeverity
    title: str
    message: str
    data: Dict[str, Any] = field(default_factory=dict)
    resolved: bool = False
    resolved_at: Optional[datetime] = None
    
    def resolve(self):
        """Mark the alert as resolved."""
        self.resolved = True
        self.resolved_at = datetime.utcnow()


@dataclass
class DepegAlert(Alert):
    """Specialized alert for token depeg scenarios."""
    token: Token = None
    expected_price: float = 0.0
    actual_price: float = 0.0
    deviation_percent: float = 0.0
    pair: TradingPair = None
    
    def __post_init__(self):
        self.event_type = EventType.DEPEG_ALERT
        self.title = f"Token Depeg Alert: {self.token.symbol}"
        self.message = (
            f"{self.token.symbol} has depegged by {self.deviation_percent:.2f}%. "
            f"Expected: ${self.expected_price:.4f}, Actual: ${self.actual_price:.4f}"
        )
        self.data = {
            "token_symbol": self.token.symbol,
            "token_address": self.token.address,
            "expected_price": self.expected_price,
            "actual_price": self.actual_price,
            "deviation_percent": self.deviation_percent,
            "pair_name": self.pair.pair_name,
            "pool_address": self.pair.pool_address
        }


@dataclass
class VolumeAlert(Alert):
    """Specialized alert for volume spikes."""
    pair: TradingPair = None
    current_volume: float = 0.0
    average_volume: float = 0.0
    spike_multiplier: float = 0.0
    
    def __post_init__(self):
        self.event_type = EventType.VOLUME_SPIKE
        self.title = f"Volume Spike Alert: {self.pair.pair_name}"
        self.message = (
            f"Volume spike detected in {self.pair.pair_name}. "
            f"Current: ${self.current_volume:,.2f}, "
            f"Average: ${self.average_volume:,.2f} "
            f"({self.spike_multiplier:.1f}x normal)"
        )
        self.data = {
            "pair_name": self.pair.pair_name,
            "pool_address": self.pair.pool_address,
            "current_volume": self.current_volume,
            "average_volume": self.average_volume,
            "spike_multiplier": self.spike_multiplier
        }


@dataclass
class MonitoringStats:
    """Statistics for the monitoring system."""
    timestamp: datetime
    total_pairs_monitored: int
    total_events_processed: int
    active_alerts: int
    uptime_seconds: int
    last_block_processed: Optional[int] = None
    events_per_minute: float = 0.0